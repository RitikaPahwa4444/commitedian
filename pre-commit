#!/bin/bash

# Smart pre-commit hook leveraging GitHub Copilot CLI for AI-powered code review with playful feedback
# Ensure GitHub CLI and Copilot CLI extension are installed
# Add colorful output and graphics
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
NC="\033[0m" # No Color

# Function to display a welcome banner
print_welcome_banner() {
  echo -e "${BLUE}====================================================================================${NC}"
  echo -e "${YELLOW}   ____    ____   __  __  __  __  _  ______  _   ____   _____   ______   _     _ ${NC}"
  echo -e "${YELLOW}  / ___|  / __ \ |  \/  ||  \/  || ||__  __|| | |  _ \ | ____| /  __  \ | \   | |${NC}"
  echo -e "${YELLOW} | |     | |  | || |\/| || |\/| || |   | |  | | | | | ||  _|   | |__| | | |\  | |${NC}"
  echo -e "${YELLOW} | |___  | |__| || |  | || |  | || |   | |  | | | |_| || |___  |  __  | | | \ | |${NC}"
  echo -e "${YELLOW}  \____|  \____/ |_|  |_||_|  |_||_|   |_|  |_| |____/ |_____| |_|  |_| |_|  \|_|${NC}"
  echo -e ""                                                    
  echo -e "${BLUE}====================================================================================${NC}"
  echo -e "${GREEN}                       ðŸŽ­ Welcome to Commitedian ðŸŽ­                                ${NC}"
  echo -e "${BLUE}====================================================================================${NC}"
}

# Function to display a success graphic
print_success_graphic() {
  echo -e "${BLUE} __     __  ______  __     __   _  ${NC}"
  echo -e "${BLUE}  \ \_/ /  /  __  \  \ \_/ /   | | ${NC}"
  echo -e "${BLUE}   \   /   | |__| |   \   /    |_| ${NC}"
  echo -e "${BLUE}    | |    |  __  |    | |      _  ${NC}"
  echo -e "${BLUE}    |_|    |_|  |_|    |_|     |_| ${NC}"
  echo -e ""                                                    
  echo -e "${GREEN}======= ðŸŽ‰ðŸŽ‰ðŸŽ‰ SUCCESS! ðŸŽ‰ðŸŽ‰ðŸŽ‰ ====== ${NC}"
  echo -e "${GREEN}Your code is clean and ready to commit!${NC}"
}

# Function to display a failure graphic
print_failure_graphic() {
  echo -e "${RED}             ____    ____   ____     ___     _  ${NC}"
  echo -e "${RED}            / __ \  / __ \ |  _ \ | |  |_|  | | ${NC}"
  echo -e "${RED}           | |  | || |  | || |_| |   \      |_| ${NC}"
  echo -e "${RED}           | |__| || |__| || __ /  _  \ _    _  ${NC}"
  echo -e "${RED}            \____/  \____/ |_|    | |__| |  |_| ${NC}"
  echo -e ""            
  echo -e "${YELLOW}============== ðŸ’¥ðŸ’¥ðŸ’¥ PLEASE TRY AGAIN! ðŸ’¥ðŸ’¥ðŸ’¥ ============== ${NC}"
  echo -e "${RED}Issues detected in your code. Please fix them before committing.${NC}"                                                  
}

print_welcome_banner
any_issues_found=false
issue_marker_dir="/tmp/commitedian_issues_$$"
mkdir -p "$issue_marker_dir"

# Function to play sound and display a message
play_sound_and_message() {
  local sound_file=$1
  local message=$2
  echo -e "${BLUE}$message${NC}"

  if [ -f "$sound_file" ]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      if command -v afplay &> /dev/null; then
        afplay "$sound_file"
      else
        echo -e "${YELLOW}afplay is not installed. Skipping audio playback.${NC}"
      fi
    else
      echo -e "${YELLOW}Audio playback is not supported on this platform.${NC}"
    fi
  else
    echo -e "${RED}Sound file $sound_file not found. Skipping playback.${NC}"
  fi

}

# Function to handle issue types dynamically
handle_issue_type() {
  local file=$1
  local copilot_output=$2

  # Sanitize copilot_output by removing ```json and ``` markers
  copilot_output=$(echo "$copilot_output" | sed 's/^```json//' | sed 's/```$//')

  echo "$copilot_output"

  # Validate JSON before using jq
  if ! echo "$copilot_output" | jq empty 2>/dev/null; then
    echo -e "${RED}Invalid JSON returned from LLM for $file. Skipping analysis for this file.${NC}"
    return
  fi

  local file_issues_found=false
  while IFS="|" read -r issue_type playful_message; do
    echo "Issue Found: $issue_type"
    sound_file="$sounds_dir/$issue_type.mp3"
    if [[ -n "$sound_file" ]]; then
        play_sound_and_message "$sound_file" "$playful_message"
    else
        echo -e "${YELLOW}No sound associated with issue type: $issue_type. Skipping playback.${NC}"
    fi
    file_issues_found=true
    any_issues_found=true
  done < <(echo "$copilot_output" | jq -r '.[] | "\(.issue_type)|\(.playful_message)"')

  if $file_issues_found; then
    touch "$issue_marker_dir/$file"
  fi
}

prompt="Review this code diff for the following issues: 
    1. Weird debug logs (e.g., \"hello from ABC!\") or too many debug print statements (as if a debugger never existed). 
    2. Hard-coded secrets (e.g., passwords, API keys). 
    3. Typos or grammatical errors. 
    4. Generic variable or function names (e.g., temp, data). 
    5. Any other potential issues or improvements. 
    For each detected issue, provide a JSON response with fields: \"issue_type\" and \"playful_message\". The \"playful_message\" should be witty and engaging, tailored to the issue type and the code being reviewed.

    Classify the issues into the following issue_type:
        \"debug_log\"
        \"hard_coded_secret\"
        \"typo\"
        \"generic_name\"
    Only return valid json as output, no other text. If no issues are found, return an empty array: []
    Indicate the line of code (skip line number, point to actual code) and context of the issue in the playful message. Name the exact generic variable name used, typo made, grammatical error, or debug log message.
    CODE_DIFF: "

# Analyze all staged files
staged_files=$(git diff --cached --name-only)

if [ -z "$staged_files" ]; then
  echo -e "${YELLOW}No files staged for commit. Skipping analysis.${NC}"
  exit 0
fi

batch_size=5
file_batch=()
process_file() {
  local file=$1
  if [ -f "$file" ]; then
    echo -e "${BLUE}Running GitHub review on $file...${NC}"
    git_diff=$(git diff --cached "$file")
    if [ -z "$git_diff" ]; then
      echo -e "${YELLOW}No changes detected in $file. Skipping analysis.${NC}"
      return
    fi
    echo -e "${BLUE}Code diff for $file:\n$git_diff${NC}"
    final_prompt="$prompt\n$git_diff"
    copilot_output=$(gh models run openai/gpt-4o-mini "$final_prompt")
    handle_issue_type "$file" "$copilot_output"
    echo "$any_issues_found"
  fi
}

process_batch() {
  for file in "${file_batch[@]}"; do
    process_file "$file" &
  done
  wait
}

for file in $staged_files; do
  file_batch+=("$file")
  if [ "${#file_batch[@]}" -ge "$batch_size" ]; then
    process_batch
    file_batch=()
  fi
done

if [ "${#file_batch[@]}" -gt 0 ]; then
  process_batch
fi

echo "$any_issues_found"
# After processing all files, check for issue marker files
if [ "$(ls -A $issue_marker_dir)" ]; then
  print_failure_graphic
  echo -e "${YELLOW}Do you want to proceed with the commit? (yes/no)${NC}"
  read -r user_input < /dev/tty
  if [[ "$user_input" == "yes" ]]; then
    echo -e "${GREEN}Proceeding with the commit...${NC}"
    rm -rf "$issue_marker_dir"
    exit 0
  else
    echo -e "${RED}Commit aborted by the user.${NC}"
    rm -rf "$issue_marker_dir"
    exit 1
  fi
else
  play_sound_and_message "$sounds_dir/applause.mp3" "Great job! No issues found in any staged file."
  print_success_graphic
  echo -e "${GREEN}Proceeding with the commit...${NC}"
  rm -rf "$issue_marker_dir"
  exit 0
fi
